//
// SketchfabApi.Model.cs
//
// Author:
//       Xavier Fischer 2020-4
//
// Copyright (c) 2020 Xavier Fischer
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace Sketchfab
{
    public partial class SketchfabApi
    {
        public async Task<SketchfabUploadResponse> UploadModelAsync(UploadModelRequest request, string sketchFabToken)
        {
            SketchfabUploadResponse sfResponse = new SketchfabUploadResponse();
            try
            {
                _logger.LogInformation($"Uploading model [{request.FilePath}].");
                if (string.IsNullOrWhiteSpace(request.FilePath))
                {
                    throw new ArgumentNullException(nameof(request.FilePath));
                }

                if (!File.Exists(request.FilePath))
                {
                    throw new FileNotFoundException($"File [{request.FilePath}] not found.");
                }
                HttpRequestMessage httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, $"{SketchfabApiUrl}/models");
                httpRequestMessage.AddAuthorizationHeader(sketchFabToken, request.TokenType);
                using var form = new MultipartFormDataContent();
                using var fileContent = new ByteArrayContent(await File.ReadAllBytesAsync(request.FilePath));
                fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse("multipart/form-data");
                form.Add(fileContent, "modelFile", Path.GetFileName(request.FilePath));
                if (!string.IsNullOrWhiteSpace(request.Source))
                {
                    form.Add(new StringContent(request.Source), "source");
                }
                else
                {
                    _logger.LogWarning("Sketchfab upload has no source configured. It's better to set one to uniquely identify all the models generated by the exporter, see https://Sketchfab.com/developers/guidelines#source");
                }

                AddCommonModelFields(form, request);

                httpRequestMessage.Content = form;


                var httpClient = _httpClientFactory.CreateClient();
                var response = await httpClient.SendAsync(httpRequestMessage, HttpCompletionOption.ResponseContentRead);
                _logger.LogInformation($"{nameof(UploadModelAsync)} responded {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    var uuid = response.Headers.GetValues("Location").FirstOrDefault();
                    sfResponse.ModelId = uuid;
                    sfResponse.StatusCode = response.StatusCode;
                    sfResponse.Message = response.ReasonPhrase;
                    request.ModelId = uuid;
                    _logger.LogInformation("Uploading is complete. Model uuid is " + uuid);
                }
                else
                {
                    _logger.LogError($"Error in Sketchfab upload: {response.StatusCode} {response.ReasonPhrase}");
                    sfResponse.StatusCode = response.StatusCode;
                    sfResponse.Message = response.ReasonPhrase;
                }

                return sfResponse;
            }
            catch (Exception ex)
            {
                _logger.LogError($"Sketchfab upload error: {ex.Message}");
                throw;
            }

        }

        private string GetAuthPrefix(UploadModelRequest request)
        {
            return request.TokenType.ToString();
        }

        public async Task UpdateModelAsync(string modelId, UpdateModelRequest request, string sketchFabToken, TokenType tokenType)
        {
            try
            {
                _logger.LogInformation($"Updating model [{modelId}].");
                if (string.IsNullOrWhiteSpace(modelId))
                {
                    throw new ArgumentNullException(nameof(modelId));
                }

                HttpRequestMessage httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, $"{SketchfabApiUrl}/models/{modelId}");
                httpRequestMessage.AddAuthorizationHeader(sketchFabToken, tokenType);

                using var form = new MultipartFormDataContent();
                form.Headers.ContentType.MediaType = "multipart/form-data";

                AddCommonModelFields(form, request);

                httpRequestMessage.Content = form;

                var httpClient = _httpClientFactory.CreateClient();
                var response = await httpClient.SendAsync(httpRequestMessage);

                _logger.LogInformation($"{nameof(UpdateModelAsync)} responded {response.StatusCode}");
                response.EnsureSuccessStatusCode();

            }
            catch (Exception ex)
            {
                _logger.LogError($"Sketchfab update error: {ex.Message}");
                throw;
            }

        }

        public async Task<Model> GetModelAsync(string modelId, string sketchFabToken, TokenType tokenType)
        {
            try
            {
                _logger.LogInformation($"Get model");

                if (string.IsNullOrWhiteSpace(modelId)) throw new ArgumentNullException(nameof(modelId));

                HttpRequestMessage httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, $"{SketchfabApiUrl}/models/{modelId}");
                httpRequestMessage.Headers.CacheControl = new CacheControlHeaderValue() { NoCache = true };
                httpRequestMessage.AddAuthorizationHeader(sketchFabToken, tokenType);

                var httpClient = _httpClientFactory.CreateClient();
                
                var response = await httpClient.SendAsync(httpRequestMessage, HttpCompletionOption.ResponseContentRead);
                _logger.LogInformation($"{nameof(GetModelAsync)} responded {response.StatusCode}");
                response.EnsureSuccessStatusCode();

                var json = await response.Content.ReadAsStringAsync();

                var model = JsonConvert.DeserializeObject<Model>(json);

                _logger.LogInformation($"GetModelAsync OK");

                return model;
            }
            catch (Exception ex)
            {
                _logger.LogError($"Sketchfab GetModelAsync error: {ex.Message}");
                throw;
            }

        }

        public async IAsyncEnumerable<Model> GetMyModelsAsync(string sketchFabToken, TokenType tokenType)
        {
            _logger.LogInformation($"Get my models");

            HttpRequestMessage httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, $"{SketchfabApiUrl}/me/models");
            httpRequestMessage.AddAuthorizationHeader(sketchFabToken, tokenType);

            await foreach (var result in GetPagedResultAsync<Model>(httpRequestMessage))
            {
                yield return result;
            }

        }

        public async IAsyncEnumerable<T> GetPagedResultAsync<T>(HttpRequestMessage httpRequestMessage)
        {
            int numResults = 0, numPages = 0;

            var httpClient = _httpClientFactory.CreateClient();
            var response = await httpClient.SendAsync(httpRequestMessage, HttpCompletionOption.ResponseContentRead);
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();

            var pagedResult = JsonConvert.DeserializeObject<PagedResult<T>>(json);

            numPages++;
            foreach (var model in pagedResult.results)
            {
                numResults++;
                yield return model;
            }
            while (pagedResult.next != null)
            {
                numPages++;
                var nextMessage = httpRequestMessage.Clone();
                nextMessage.RequestUri = new Uri(pagedResult.next);
                response = await httpClient.SendAsync(nextMessage, HttpCompletionOption.ResponseContentRead);

                json = await response.Content.ReadAsStringAsync();
                pagedResult = JsonConvert.DeserializeObject<PagedResult<T>>(json);
                foreach (var model in pagedResult.results)
                {
                    numResults++;
                    yield return model;
                }
            }

            _logger.LogInformation($"{nameof(GetPagedResultAsync)}<{nameof(T)}> returned {numResults} result(s) in {numPages} page(s)");


        }

       

        public async Task<bool> IsReadyAsync(string modelId, string token)
        {
            try
            {
                var model = await this.GetModelAsync(modelId, token, TokenType.Token);

                return model.IsReady();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Sketchfab IsReadyAsync error: {ex.Message}");
                throw;
            }
        }
    }
}
